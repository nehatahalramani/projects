import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]]
    ]
    return [player, player, player] in win_conditions

def check_draw(board):
    return all(cell in ['X', 'O'] for row in board for cell in row)

def get_player_move(board, player_name):
    while True:
        move = input(f"{player_name}, enter your move (0-8): ")
        if not move.isdigit():
            print("Please enter a valid number.")
            continue
        move = int(move)
        if not (0 <= move <= 8):
            print("Please enter a number between 0 and 8.")
            continue
        row, col = divmod(move, 3)
        if board[row][col] != ' ':
            print("Cell is already taken. Try again.")
            continue
        return row, col

def minimax(board, depth, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    if check_winner(board, 'X'):
        return -1
    if check_draw(board):
        return 0

    if is_maximizing:
        best_score = float('-inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[row][col] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[row][col] = ' '
                    best_score = min(score, best_score)
        return best_score

def get_computer_move(board):
    best_score = float('-inf')
    best_move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == ' ':
                board[row][col] = 'O'
                score = minimax(board, 0, False)
                board[row][col] = ' '
                if score > best_score:
                    best_score = score
                    best_move = (row, col)
    return best_move

def play_game():
    player_name = input("Enter your name: ")
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'  # Player starts

    while True:
        print_board(board)
        
        # Player move
        if current_player == 'X':
            row, col = get_player_move(board, player_name)
        else:  # Computer move
            row, col = get_computer_move(board)
            print(f"Computer chose: {row * 3 + col}")

        board[row][col] = current_player

        if check_winner(board, current_player):
            print_board(board)
            if current_player == 'X':
                print(f"{player_name} wins!")
            else:
                print("Computer wins!")
            break

        if check_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        # Switch player
        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    play_game()
